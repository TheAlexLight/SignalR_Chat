<ResourceDictionary xmlns="http://schemas.microsoft.com/winfx/2006/xaml/presentation"
                    xmlns:x="http://schemas.microsoft.com/winfx/2006/xaml">

    <ResourceDictionary.MergedDictionaries>
        <ResourceDictionary Source="../Resources/Images/Send.xaml"/>
    </ResourceDictionary.MergedDictionaries>

    <LinearGradientBrush x:Key="registrationBasicColors" StartPoint="0.5,0" EndPoint="0.5,1">
        <GradientStop Color="#F4DA99" Offset="0"/>
        <GradientStop Color="#DEB13F" Offset="1"/>
    </LinearGradientBrush>
    
    <LinearGradientBrush x:Key="registrationMouseOverColors" StartPoint="0.5,0" EndPoint="0.5,1">
        <GradientStop Color="#EBC975" Offset="0"/>
        <GradientStop Color="#D59C0C" Offset="1"/>
    </LinearGradientBrush>

    <LinearGradientBrush x:Key="registrationIsPressedColors" StartPoint="0.5,0" EndPoint="0.5,1">
        <GradientStop Color="#F3E6BC" Offset="0"/>
        <GradientStop Color="#DFB95B" Offset="1"/>
    </LinearGradientBrush>

    <LinearGradientBrush x:Key="registrationIsDisabledColors" StartPoint="0.5,0" EndPoint="0.5,1">
        <GradientStop Color="#DDDCD8" Offset="0"/>
        <GradientStop Color="#C9C6BC" Offset="0.7"/>
        <GradientStop Color="#C5C4C2" Offset="1"/>
    </LinearGradientBrush>

    <Style x:Key="submitButton" TargetType="{x:Type Button}">
        <Setter Property="BorderThickness" Value="0"/>
        <Setter Property="FontSize" Value="22"/>
        <Setter Property="FontWeight" Value="Medium"/>
        <Setter Property="Height" Value="35"/>
        <Setter Property="Width" Value="310"/>
        <Setter Property="HorizontalAlignment" Value="Center"/>
        <Setter Property="VerticalAlignment" Value="Center"/>
        <Setter Property="HorizontalContentAlignment" Value="Center"/>
        <Setter Property="VerticalContentAlignment" Value="Center"/>
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="{x:Type Button}">
                    <Border x:Name="insideBorder" BorderBrush="#6D4F02" Background="{StaticResource registrationBasicColors}" 
                            BorderThickness="1.3" 
                            CornerRadius="5"
                            Margin="{TemplateBinding Padding}">
                        <ContentPresenter HorizontalAlignment="Center"
                                          VerticalAlignment="Center"/>
                    </Border>
                    <ControlTemplate.Triggers>
                        <Trigger Property="IsMouseOver" Value="True">
                            <Setter TargetName="insideBorder" Property="Background" Value="{StaticResource registrationMouseOverColors}"/>
                        </Trigger>
                        <Trigger Property="IsEnabled" Value="False">
                            <Setter TargetName="insideBorder" Property="Background" Value="{StaticResource registrationIsDisabledColors}"/>
                        </Trigger>
                        <Trigger Property="IsPressed" Value="True">
                            <Setter TargetName="insideBorder" Property="Background" Value="{StaticResource registrationIsPressedColors}"/>
                        </Trigger>
                    </ControlTemplate.Triggers>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>

    <ControlTemplate x:Key="authorizationControlTemplate" TargetType="{x:Type Button}">
        <Border x:Name="insideBorder" BorderBrush="#6D4F02" Background="{StaticResource registrationBasicColors}" 
                            BorderThickness="1.3" 
                            CornerRadius="5"
                            Margin="{TemplateBinding Padding}">
            <Grid HorizontalAlignment="Center">
                <StackPanel Orientation="Horizontal" 
                                        x:Name="waitingLoading"
                                        Visibility="Collapsed">
                    <StackPanel.Triggers>
                        <EventTrigger RoutedEvent="Rectangle.Loaded">
                            <BeginStoryboard>
                                <Storyboard x:Name="waitingAnimation" RepeatBehavior="Forever">
                                    <DoubleAnimation Storyboard.TargetName="Dot1"
                                                         BeginTime="0:0:0.1" 
                                                         Storyboard.TargetProperty="Opacity" 
                                                         From=".1"
                                                         To="1"
                                                         AutoReverse="True"
                                                         Duration="0:0:0.4"/>
                                    <DoubleAnimation Storyboard.TargetName="Dot2" 
                                                         BeginTime="0:0:0.2" 
                                                         Storyboard.TargetProperty="Opacity" From=".1"
                                                         To="1" 
                                                         AutoReverse="True" 
                                                         Duration="0:0:0.4"/>
                                    <DoubleAnimation Storyboard.TargetName="Dot3" 
                                                         BeginTime="0:0:0.3" 
                                                         Storyboard.TargetProperty="Opacity" 
                                                         From=".1"
                                                         To="1" 
                                                         AutoReverse="True" 
                                                         Duration="0:0:0.4"/>
                                </Storyboard>
                            </BeginStoryboard>
                        </EventTrigger>
                    </StackPanel.Triggers>
                    <Ellipse Name="Dot1" Fill="#1B3258" Opacity="0.1" Width="10" Height="10"/>
                    <Ellipse Name="Dot2" Fill="#1B3258" Opacity="0.1" Width="10" Height="10" Margin="2,0,0,0"/>
                    <Ellipse Name="Dot3" Fill="#1B3258" Opacity="0.1" Width="10" Height="10" Margin="2,0,0,0"/>
                </StackPanel>
                <ContentPresenter HorizontalAlignment="Center"
                                          VerticalAlignment="Center"
                                              x:Name="contentPresenter"/>
            </Grid>
        </Border>
        <ControlTemplate.Triggers>
            <DataTrigger Binding="{Binding IsLoading}" Value="True">
                <Setter TargetName="waitingLoading" Property="Visibility" Value="Visible"/>
                <Setter TargetName="contentPresenter" Property="Visibility" Value="Collapsed"/>
            </DataTrigger>
            <Trigger Property="IsMouseOver" Value="True">
                <Setter TargetName="insideBorder" Property="Background" Value="{StaticResource registrationMouseOverColors}"/>
            </Trigger>
            <Trigger Property="IsEnabled" Value="False">
                <Setter TargetName="insideBorder" Property="Background" Value="{StaticResource registrationIsDisabledColors}"/>
            </Trigger>
            <Trigger Property="IsPressed" Value="True">
                <Setter TargetName="insideBorder" Property="Background" Value="{StaticResource registrationIsPressedColors}"/>
            </Trigger>
        </ControlTemplate.Triggers>
    </ControlTemplate>

    <Style x:Key="loginButton" TargetType="{x:Type Button}" BasedOn="{StaticResource submitButton}">
        <Setter Property="IsEnabled" Value="False"/>
        <Setter Property="Template" Value="{StaticResource authorizationControlTemplate}"/>
        <Style.Triggers>
            <MultiDataTrigger>
                <MultiDataTrigger.Conditions>
                    <Condition Binding="{Binding Path=(Validation.HasError), ElementName=txtUsername}" Value="False"/>
                    <Condition Binding="{Binding Path=Text.IsEmpty, ElementName=txtUsername}" Value="False"/>
                </MultiDataTrigger.Conditions>
                <Setter Property="IsEnabled" Value="True"/>
            </MultiDataTrigger>
        </Style.Triggers>
    </Style>

    <Style x:Key="registrationButton" TargetType="{x:Type Button}" BasedOn="{StaticResource loginButton}">
        <Setter Property="IsEnabled" Value="False"/>
        <Style.Triggers>
            <MultiDataTrigger>
                <MultiDataTrigger.Conditions>
                    <Condition Binding="{Binding Path=(Validation.HasError), ElementName=txtUsername}" Value="False"/>
                    <Condition Binding="{Binding Path=(Validation.HasError), ElementName=txtEmail}" Value="False"/>
                    <Condition Binding="{Binding Path=Text.IsEmpty, ElementName=txtUsername}" Value="False"/>
                    <Condition Binding="{Binding Path=Text.IsEmpty, ElementName=txtEmail}" Value="False"/>
                </MultiDataTrigger.Conditions>
                <Setter Property="IsEnabled" Value="True"/>
            </MultiDataTrigger>
        </Style.Triggers>
    </Style>

    <Style x:Key="reconnectionButton" TargetType="{x:Type Button}" BasedOn="{StaticResource submitButton}">
        <Setter Property="Template" Value="{StaticResource authorizationControlTemplate}"/>
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="{x:Type Button}">
                    <Border x:Name="insideBorder" BorderBrush="#6D4F02" Background="{StaticResource registrationBasicColors}" 
                            BorderThickness="1.3" 
                            CornerRadius="5"
                            Margin="{TemplateBinding Padding}">
                        <ContentPresenter HorizontalAlignment="Center"
                                          VerticalAlignment="Center"/>
                    </Border>
                    <ControlTemplate.Triggers>
                        <Trigger Property="IsMouseOver" Value="True">
                            <Setter TargetName="insideBorder" Property="Background" Value="{StaticResource registrationMouseOverColors}"/>
                        </Trigger>
                        <Trigger Property="IsEnabled" Value="False">
                            <Setter TargetName="insideBorder" Property="Background" Value="{StaticResource registrationIsDisabledColors}"/>
                        </Trigger>
                        <Trigger Property="IsPressed" Value="True">
                            <Setter TargetName="insideBorder" Property="Background" Value="{StaticResource registrationIsPressedColors}"/>
                        </Trigger>
                    </ControlTemplate.Triggers>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
        <Style.Triggers>
            <DataTrigger Binding="{Binding IsLoading}" Value="True">
                <Setter Property="IsEnabled" Value="False"/>
            </DataTrigger>
        </Style.Triggers>
    </Style>

    <Style x:Key="sendMessage" TargetType="{x:Type Button}" BasedOn="{StaticResource submitButton}">
        <Setter Property="Content" Value="Send"/>
        <Setter Property="FontSize" Value="28"/>
        <Setter Property="Margin" Value="0,5,5,5"/>
        <Setter Property="Width" Value="Auto"/>
        <Setter Property="Height" Value="Auto"/>
        <Setter Property="HorizontalAlignment" Value="Stretch"/>
        <Setter Property="VerticalAlignment" Value="Stretch"/>
    </Style>

    <Style x:Key="sendImageMessage" TargetType="{x:Type Button}">
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="{x:Type Button}">
                    <Border Name="border" Background="Transparent" BorderBrush="Transparent">
                        <ContentPresenter HorizontalAlignment="Stretch" VerticalAlignment="Stretch"/>
                    </Border>
                    <ControlTemplate.Triggers>
                        <Trigger Property="IsMouseOver" Value="True">
                            <Setter TargetName="border" Property="Background" Value="Transparent"/>
                        </Trigger>
                    </ControlTemplate.Triggers>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>

    <Style x:Key="toolBarButton" TargetType="{x:Type Button}">
        <Setter Property="HorizontalAlignment" Value="Stretch"/>
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="{x:Type Button}">
                    <Border BorderThickness="1" 
                            CornerRadius="5"
                            BorderBrush="#525251"
                            Padding="1"
                            HorizontalAlignment="Stretch"
                            Name="toolBarBorder"
                            Background="{StaticResource registrationBasicColors}"
                            Margin="0,2,0,2">
                        <ContentPresenter HorizontalAlignment="Center"
                                          VerticalAlignment="Center"/>
                    </Border>
                    <ControlTemplate.Triggers>
                        <Trigger Property="IsMouseOver" Value="True">
                            <Setter TargetName="toolBarBorder" Property="Background" Value="{StaticResource registrationMouseOverColors}"/>
                        </Trigger>
                        <Trigger Property="IsEnabled" Value="False">
                            <Setter TargetName="toolBarBorder" Property="Background" Value="{StaticResource registrationIsDisabledColors}"/>
                        </Trigger>
                        <Trigger Property="IsPressed" Value="True">
                            <Setter TargetName="toolBarBorder" Property="Background" Value="{StaticResource registrationIsPressedColors}"/>
                        </Trigger>
                    </ControlTemplate.Triggers>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>

</ResourceDictionary>